extensions [csv profiler]

breed [consumers consumer]
breed [providers provider]

providers-own [ utility
  profile
  pRatingList
  nearestConsumers ;list of (consumer,distanceToProvider)
  isLiar ;tells if the provider is a liar thus giving
]
consumers-own [ activityLevel noTrustValue hasTrustValue ratingList isLiar ]

globals [
  nbActive
  lambdaDist
  radiusOperation
  lambda
  gammaI
  gammaR
  gammaW
  gammaC
  nBF
  maxDepth

  histSize
  temperature
  minT
  deltaT

  W_IT
  W_WR
  W_CR
  W_RB

  openList
  closed_list
  simuTicks

  UG
  UG-mes

  roI
  roI-mes
  roW
  roW-mes
  roC
  roC-mes
  roO
  roO-mes
  countIT
  countWR
  countCR
  countOT
]

to-report GOOD
  report 0
end

to-report ORDINARY
  report 1
end

to-report INTERMITTENT
  report 2
end

to-report BAD
  report 3
end

;; saving measures to csv file
to export-measures
  let name ""
  if do_IT [set name (word name "IT-")]
  if do_WR [set name (word name "WR-")]
  if do_CR [set name (word name "CR-")]
  if DYNAMIC_ENV [set name (word name "Dyn-")]

  let date date-and-time
  set date substring date 0 13
  set date remove ":" date
  set date remove " " date
  set date remove "." date

  if save_utility [csv:to-file (word "save_data/SAVE_" "liarProba" liar-probability "_" date ".csv") (list UG)]
  if save_reliability [csv:to-file (word "save_data/RELIABILITYSAVE_" name date ".csv") (list roI roW roC roO)]
  if save_mean_deviation_ug [csv:to-file (word "save_data/mean" date ".csv") (list compute-mean-deviation-ug)]
end

to export-histogram-ug

  let UG-list ([10 * (item 3 (last ratingList))] of consumers)
  show UG-list

  let date date-and-time
  set date substring date 0 13
  set date remove ":" date
  set date remove " " date
  set date remove "." date

  csv:to-file (word "save_data/SAVE_histogramUG_" date ".csv" ) (list UG-list)

end

to-report compute-mean-deviation-ug
  let UG-list ([10 * (item 3 (last ratingList))] of consumers)
  let std standard-deviation UG-list
  let m mean UG-list

  report (list std m)
end

to setup-constants
  set UG [];mesures
  set UG-mes 0;mesures
  set roI [];mesures
  set roI-mes 0;mesures
  set roW [];mesures
  set roW-mes 0;mesures
  set roC [];mesures
  set roC-mes 0;mesures
  set roO [];mesures
  set roO-mes 0;mesures
  set countIT 0;mesures
  set countWR 0;mesures
  set countCR 0;mesures
  set countOT 0;mesures

  set nbActive 0;mesures
  set lambdaDist 1
  set radiusOperation 10

  set lambda -5 / ln 0.5;fixé
  set gammaI (- ln 0.5);fixé
  set gammaR (- ln 0.5);fixé
  set gammaW (- ln 0.5);fixé
  set gammaC (- ln 0.5);fixé

  set nBF 2
  set maxDepth 5

  set histSize 10 ;fixé
  set temperature 1
  set minT 0.02
  set deltaT 0.1

  set W_IT 2;fixé
  set W_WR 1;fixé
  set W_CR 0.5;fixé
  set W_RB 2;fixé

  set closed_list no-turtles
  set openList []
  set simuTicks 200
end

to relaunch
  ;;Setup again for a new simulation
  setup

  ;;Put some changes here for the next simulation


end

to setup
  clear-all

  ;;PROFILER
  if HAS_PROFILER [profiler:reset profiler:start]

  ;;setup constants
  setup-constants

  ;;spawn the providers
  spawn-providers
  spawn-consumers number-of-consumers

  ;;set some information about each provider
  ask providers
  [
    set nearestConsumers []
    let res sort-set-distance-to-agent consumers (turtle who)
    foreach res
    [
      c ->
      set nearestConsumers (lput (list c (distance c)) nearestConsumers)

    ]
    ;show (list "id:" who ", near:" nearestConsumers)
    ;set nearestConsumers sort-set-distance-to-agent consumers (turtle who)  ;takes a lot of time
  ]

  update-plots
  reset-ticks
end

to go
  if ticks < 1 [reset-timer ];time measurements

  reset-globals ;reset global variable (for measurements)

  ask consumers
  [
    ;; le consumer ne dort pas
    if random 100 < activityLevel
    [
      ;; quelques initialisations
      set nbActive nbActive + 1
      set noTrustValue []
      set hasTrustValue []
      let OT []
      let rmOT []


      ;; on parcourt les providers de la carte
      foreach [who] of providers
      [
        providerId ->

        let it_ratings []
        let wr_ratings []
        let cr_ratings []
        let IT 0
        let rmIT 0
        let WR 0
        let rmWR 0
        let CR 0
        let rmCR 0


        ;;calcul de IT
        if do_IT
        [
          set it_ratings (find-ratings ratingList 2 providerId)
          let res (get-trust-and-reliability it_ratings)
          set IT item 0 res
          set rmIT item 1 res
          set roI-mes (roI-mes + rmIT)
          set countIT (countIT + 1)
        ]

        ;;calcul de WR
        if do_WR AND ticks > 0
        [
          set openList [nearestConsumers] of (turtle providerId)
          set closed_list []

          set wr_ratings dfs_neighbour self 0 providerId
          if WR_verbose [show "-OUT-"]

          let res (get-trust-and-reliability wr_ratings)
          set WR item 0 res
          set rmWR item 1 res
          set roW-mes (roW-mes + rmWR)
          set countWR (countWR + 1)
        ]


        ;;calcul de CR
        if do_CR
        [
          ;;skip ratings from current simulation turn
          foreach ([pRatingList] of turtle providerId)
          [
            r ->
            if (item 0 r) != ticks
            [
              set cr_ratings (lput r cr_ratings)
            ]
          ]

          let res (get-trust-and-reliability cr_ratings)
          set CR item 0 res
          set rmCR item 1 res
          set roC-mes (roC-mes + rmCR)
          set countCR (countCR + 1)
        ]

        ;; build noTrustValue and hasTrustValue lists
        ifelse (empty? it_ratings) AND (empty? wr_ratings) AND (empty? cr_ratings)
        [
          ;;no available ratings (p138)
          set noTrustValue lput (turtle providerId) noTrustValue
        ]
        [
          ;;available ratings
          set hasTrustValue lput (turtle providerId) hasTrustValue

          ;show (list "rm" rmIT rmWR rmCR)
          ;show (list "C" IT WR CR)
          let res (get-overall-trust-and-reliability (list IT WR CR) (list rmIT rmWR rmCR)) ;;fonction pour calculer l'OT
          set OT lput (item 0 res) OT ;; liste des overall ratings
          set rmOT lput (item 1 res) rmOT ;; liste de fiabilité des overall ratings

          set roO-mes (roO-mes + (item 1 res))
          set countOT (countOT + 1)
        ]
      ]
      ;;choix du provider
      let choosenProvider nobody
      ifelse(not (empty? hasTrustValue))
      [
        let res (find-best-provider hasTrustValue OT)
        let bestProvider item 0 res
        let bestUtility item 1 res
        let randomUtility (get-random-expected-reward OT)

        let probaRandom (proba-boltzman randomUtility bestUtility)
        ifelse random 100 > (probaRandom * 100) OR (empty? noTrustValue)
        [
          ;show "best"
          set choosenProvider bestProvider
        ]
        [
          ;show "not best"
          set choosenProvider one-of noTrustValue
        ]
      ]
      [
        ;show noTrustValue
        set choosenProvider one-of noTrustValue
      ]

      ;; interaction consumer - choosenProvider
      let newRating interact choosenProvider

      ;; sauvegarde côté consumer historique limité
      set ratingList lput newRating ratingList
      set ratingList (limit-list-size ratingList histSize)
      ;show ratingList

      ;;sauvegarde du rating côté provider
      save-rating choosenProvider newRating
    ]
  ]

  ;;end of turn traitments
  if temperature > minT
  [
    set temperature temperature - deltaT * temperature
  ]

  ;;compute measures
  compute-measures

  if DYNAMIC_ENV [evolve-environment]
  tick
  show (word "Execution time : " timer)

  ;;check end of simulation
  if ticks = simuTicks
  [
    ;;Export simulation data
    export-measures
    if HAS_PROFILER [profiler:stop print profiler:report]

    ;;Reset simulation and continue launching
    set nb-simulation (nb-simulation - 1)
    ifelse nb-simulation > 0 [relaunch][stop]
  ]

end

to reset-globals

  set UG-mes 0
  set nbActive 0

  set roI-mes 0
  set roW-mes 0
  set roC-mes 0
  set roO-mes 0
  set countIT 0
  set countWR 0
  set countCR 0
  set countOT 0

end

to set-providers-nearest-consumers
  ask providers
  [
    set nearestConsumers []
    let res sort-set-distance-to-agent consumers (turtle who)
    foreach res
    [
      c ->
      set nearestConsumers (lput (list c (distance c)) nearestConsumers)

    ]
    ;show (list "id:" who ", near:" nearestConsumers)
    ;set nearestConsumers sort-set-distance-to-agent consumers (turtle who)  ;takes a lot of time
  ]
end

;; gives the list of agent in agentset sorted by distance to the target
to-report sort-set-distance-to-agent [agentSet target]
  let sortedList sort-on [distance target] agentSet
  report sortedList
end

;; Deep first search to return wr_ratings
to-report dfs_neighbour [n depth providerId]

  if WR_VERBOSE [show (list "Entering dfs_neighbour : " n "," depth "," providerId)]

  ;; Add consumer to closed list
  set closed_list (turtle-set n closed_list)

  ;; Check if the consumer is a liar. If so, report a random rating
  if ( [isLiar] of n )
  [
    let ret (list (random (ticks - 1)) ([who] of n) providerId ((random-float 2) - 1) )
    report (list ret)
  ]

  ;; Check if the consumer has ratings of the provider and report it if so
  let ret []
  set ret (find-ratings ([ratingList] of n) 2 providerId)
  if(not empty? ret) OR (depth >= 4)
  [
    if WR_VERBOSE [show (list "Exiting rating : " n "," ret)]
    report ret
  ]

  ;; Find the nBF provider's nearest consumers in the range of the current consumer
  if WR_VERBOSE [show ("Finding neighbours")]
  let neighbour_list []
  let countCons 0
  let i 0
  while [(countCons < 2) AND (i < length(openList))]
  [
    ask n [
      let cons (item 0 (item i openList))

      ;; Only add consumer in radius radiusOperation, and not in closed_list
      if ( (item 1 (item i openList))  < radiusOperation) AND (not member? cons (closed_list))
      [
        set closed_list (turtle-set cons closed_list)
        set neighbour_list (lput cons neighbour_list)
        set countCons (countCons + 1)
      ]
      set i (i + 1)
    ]
  ]

  ;; Report rating of agent + recursivily other ratings
  if WR_VERBOSE [show (list "Calling neighbours" neighbour_list)]
  foreach neighbour_list
  [
    v ->
    let res (dfs_neighbour v (depth + 1) providerId)
    set ret (sentence res ret)
    if WR_VERBOSE [show (list "Exiting one node " v "," ret)]
  ]
  if WR_VERBOSE [show (list "Exiting full node " n )]
  report ret
end

;; (deprecated dfs
to-report dfs_neighbour_old [n depth providerId]

  if (depth > 4) [report []]

  ;; Add consumer to closed list
  set closed_list (turtle-set n closed_list)

  ;; Check if the consumer has ratings of the provider and report it if so
  let ret []
  set ret (find-ratings ([ratingList] of n) 2 providerId)
  if(not empty? ret)
  [
    report ret
  ]

  ;; The current consumer has no ratings to give so it asks to his acquaintances
  let neighbour_list []

  ;; Neighbours in radiusOperation on a sphere
  set neighbour_list ( consumers with [toSpherical (distance myself) < radiusOperation])

  ;; Nearby neighbours sorted by proximity to provider
  set neighbour_list (sort-on [distance (turtle providerId)] neighbour_list)

  ; agentSet of nBF nearest neighbours of provider
  if (length neighbour_list) >= nBF
  [
    set neighbour_list (sublist neighbour_list 0 nBF)
  ]

  ;; Report rating of agent + recursivily other ratings
  foreach neighbour_list
  [
    v ->

    if(not (member? v closed_list ))
    [
      set ret (sentence (dfs_neighbour_old v (depth + 1) providerId) ret)
    ]
  ]
  report ret
end

;; converts cartesian distance to spherical distance
to-report toSpherical [dist]
  report abs(2 * radius * asin(dist / (2 * radius)) * pi / 180)
end

;; calcul utilité espérée de l'action aléatoire à partir des utlités des providers observés (p138)
to-report get-random-expected-reward [trustList]
  report (mean trustList)
 ; report 0
end

to evolve-environment
  ask consumers
  [
    if random 100 < 10 [move]
  ]
  ask providers
  [
    if random 100 < 10 [move]
    if random 100 < 2 [swap-profile]
    if random 100 < 10 [shift-mean]
  ]
  random-death-n-spawn consumer-death-n-spawn provider-death-n-spawn
  set-providers-nearest-consumers
end

to-report interact [p]
  let perf ([utility] of p)

  let dist toSpherical (distance p)
  if dist > radiusOperation
  [
    set perf (perf - (dist - radiusOperation) * lambdaDist)
    set perf (limit perf)
  ]
  set UG-mes (UG-mes + perf)

  report (list (ticks) who ([who] of p) (perf / 10))
end

;; calcul des variables des figures
to compute-measures
  set UG lput (UG-mes / nbActive) UG ;Mean utility gain
  ifelse countIT = 0 [set roI lput 0 roI][set roI lput (roI-mes / countIT) roI];Mean IT reliability. If nothing, then
  ifelse countWR = 0 [set roW lput 0 roW][set roW lput (roW-mes / countWR) roW];Mean WR reliability
  ifelse countCR = 0 [set roC lput 0 roC][set roC lput (roC-mes / countCR) roC];Mean CR reliability
  ifelse countOT = 0 [set roO lput 0 roO][set roO lput (roO-mes / countOT) roO];Mean Overall reliability
end



;; pour le CR
to save-rating [p rating]
  ask p
  [


    if (do_liars)
    [
      ;show (list "before" rating)
      if (isLiar)
      [

        let newPerf ( (item 3 rating) * 10 + (random-float maximum-lie) )
        set newPerf limit newPerf
        ;show (list (item 3 rating)  "," newPerf)
        set rating (replace-item 3 rating (newPerf / 10))
      ]
      ;show rating
    ]


    set pRatingList (lput rating pRatingList)

    ;; if list is full, delete rating with minimum performance
    if length(pRatingList) > histSize
    [
      let minPerf 1
      let minPos 0
      let i 0
      foreach pRatingList
      [
        r ->
        if (item 3 r) < minPerf
        [
          set minPerf (item 3 r)
          set minPos i
        ]
        set i (i + 1)
      ]
      set pRatingList remove (item minPos pRatingList) pRatingList
    ]
  ]
end

to-report limit-list-size [myList maxSize]
  if length myList > maxSize
  [
   set myList but-first myList
  ]
  report myList
end

;; calcul de la probabilité du 1er argument avec fonctions de Boltzman
to-report proba-boltzman [u1 u2]
  ;show (list "u1:" u1 "u2:" u2)

  let var1 exp(u1 / temperature)
  let var2 exp(u2 / temperature)
  report var1 / (var1 + var2)
end

;; renvoi le meilleur couple provider / utilité des 2 listes en entrée
to-report find-best-provider [providerList utilities]
  let umax (max utilities)
  let pmax item (position umax utilities) providerList
  report (list pmax umax)
end

;; reports the ratings with the specified value on the specified index
to-report find-ratings [ratings index value]
  let memberList []
  foreach ratings
  [
    r ->
    if (item index r) = value
    [
      set memberList lput r memberList
    ]
  ]
  report memberList
end

;; formules (6) (7) p136
to-report get-overall-trust-and-reliability [trusts rmTrusts]
  let oTrust 0
  let oReliability 0
  let W_ (list W_IT W_WR W_CR)
  let w []

  let i 0
  foreach trusts
  [
    t ->
    set w lput ((item i rmTrusts) * (item i W_)) w
    set oTrust oTrust + (t * (item i w))
    set i i + 1
  ]
  if not (sum w = 0) ;avoid division by zero in case sum(w) = 0
  [
    set oTrust (oTrust / (sum w))
  ]
  set oReliability (sum w) / (sum W_)

  report (list oTrust oReliability)
end

;; reports the trust and reliability of the rating list
to-report get-trust-and-reliability [ratings]

  ;;report zeros if there are no rating in input
  if empty? ratings
  [
    report (list 0 0)
  ]

  ;;compute trust
  let trust 0
  let weights []
  foreach ratings
  [
    r ->
    set weights (lput (exp((ticks + (item 0 r)) / lambda)) weights)
  ]
  let sumWeights sum weights

  let i 0
  foreach ratings
  [
    r ->
    set trust (trust + (item i weights) * (item 3 r))
    set i (i + 1)
  ]
  set trust (trust / sumWeights)


  ;;compute reliability
  let rating-reliability (1 - exp( - gammaI * sumWeights))
  let deviation-reliability 0
  set i 0
  foreach ratings
  [
    r ->
    set deviation-reliability ( (item i weights) * (abs ( (item 3 r) - trust )) )
    set i (i + 1)
  ]
  set deviation-reliability (1 - (0.5 * deviation-reliability / sumWeights))
  let reliability rating-reliability * deviation-reliability

  report (list trust reliability)
end

to move
  let delta_phi (random (2 * delta_ang) - delta_ang)
  let delta_theta (random (2 * delta_ang) - delta_ang)
  let theta acos (zcor / radius)
  if (xcor != 0 and ycor != 0)
  [
  let phi atan xcor ycor
  set xcor (radius * sin (theta + delta_theta) * cos (phi + delta_phi))
  set ycor (radius * sin (theta + delta_theta) * sin (phi + delta_phi))
  set zcor (radius * cos (theta + delta_theta))
  ]
end

to-report limit [u]
  if u > 10
  [
   report 10
  ]
  if u < -10
  [
   report -10
  ]
  report u
end

to spawn-providers
  ;;Creation des GOOD providers
  create-providers number-of-providers * 0.1
  [
    set profile GOOD
    random-pos
    set shape "square"
    set color green
    set utility random-normal 7.5 1
    set pRatingList []
    set isLiar False
    if (do_liars)
    [
      if ((random-float 1) < liar-probability) [set isLiar True]
    ]
  ]
  ;;Creation des ORDINARY providers
  create-providers number-of-providers * 0.4
  [
    set profile ORDINARY
    random-pos
    set shape "square"
    set color gray
    set utility random-normal 2.5 2
    set pRatingList []
    set isLiar False
    if (do_liars)
    [
      if ((random-float 1) < liar-probability) [set isLiar True]
    ]
  ]
  ;;Creation des INTERMITTENTS providers
  create-providers number-of-providers * 0.05
  [
    set profile INTERMITTENT
    random-pos
    set shape "square"
    set color pink
    set utility random-normal 0 5
    set pRatingList []
    set isLiar False
    if (do_liars)
    [
      if ((random-float 1) < liar-probability) [set isLiar True]
    ]
  ]
  ;;Creation des BAD providers
  create-providers number-of-providers * 0.45
  [
    set profile BAD
    random-pos
    set shape "square"
    set color red
    set utility random-normal -5 2
    set pRatingList []
    set isLiar False
    if (do_liars)
    [
      if ((random-float 1) < liar-probability) [set isLiar True]
    ]

  ]
end

to spawn-consumers [nb]
  ;;Creation des consumers
  create-consumers nb
  [
    random-pos
    set color blue + 2
    set activityLevel (random 76 + 25)
    set noTrustValue []
    set hasTrustValue []
    set ratingList []

    set isLiar False
    if (do_liars)
    [
      if ((random-float 1) < liar-probability) [set isLiar True]
    ]
  ]
end

to random-pos
    let phi random 360
    let theta random 181
    set xcor (radius * sin theta * cos phi)
    set ycor (radius * sin theta * sin phi)
    set zcor (radius * cos theta)
end

;;Randomly kills up to death-n-spawn consumers and providers
to random-death-n-spawn [max_cons max_prov]

  ;;Kill some providers and consumers randomly according to the rate given
  let nb_death_cons random (((max_cons / 100) * number-of-consumers) + 1)
  let nb_death_prov random (((max_prov / 100) * number-of-providers) + 1)
  repeat nb_death_cons [ask one-of consumers[die]]
  repeat nb_death_prov [ask one-of providers[die]]

  ;;Spawn some providers and consumers randomly according to the rate given
  ;;let nb_spawn_cons random (((max_cons / 100) * number-of-consumers) + 1)
  ;;let nb_spawn_prov random (((max_prov / 100) * number-of-providers) + 1)
  spawn-consumers nb_death_cons
  repeat nb_death_prov [spawn-provider]
end

to set-color
  if(profile = INTERMITTENT)
  [
    set color pink
  ]
  if(profile = BAD)
  [
    set color red
  ]
  if(profile = GOOD)
  [
    set color green
  ]
  if(profile = ORDINARY)
  [
    set color gray
  ]
end

to swap-profile
  let tmp1 profile
  set profile (random 4)
  set-color
  let tmp2 profile
  ask one-of providers with [profile = tmp2]
  [
    set profile tmp1
    set-color
  ]
end

to shift-mean
  set utility (utility + (random-float 2) - 1)
  if(utility < -10)
  [
    set utility 0
  ]
  if(utility > 10)
  [
    set utility 10
  ]
end

to spawn-provider
  ifelse (count providers with [profile = GOOD] < 0.1 * number-of-providers)
  [
    ;;Creating a GOOD provider
    create-providers 1
    [
    random-pos
      set profile GOOD
      set shape "square"
      set color green
      set utility random-normal 7.5 1
      set pRatingList []
      set isLiar False
      if (do_liars)
      [
        if ((random-float 1) < liar-probability) [set isLiar True]
      ]
    ]
  ]
  [
    ifelse (count providers with [profile = ORDINARY] < 0.4 * number-of-providers)
    [
      ;;Creating a ORDINARY provider
      create-providers 1
      [
        random-pos
        set profile ORDINARY
        set shape "square"
        set color gray
        set utility random-normal 2.5 2
        set pRatingList []
        set isLiar False
        if (do_liars)
        [
          if ((random-float 1) < liar-probability) [set isLiar True]
        ]
      ]
    ]
    [
      ;;Creating a BAD provider
      ifelse (count providers with [profile = BAD] < 0.45 * number-of-providers)
      [
        create-providers 1
        [
          set profile BAD
          random-pos
          set shape "square"
          set color red
          set utility random-normal -5 2
          set pRatingList []
          set isLiar False
          if (do_liars)
          [
            if ((random-float 1) < liar-probability) [set isLiar True]
          ]
        ]
      ]
      [
        if (count providers with [profile = INTERMITTENT] < 0.05 * number-of-providers)
        [
          ;;Creating an INTERMITTENT provider
          create-providers 1
          [
            set profile INTERMITTENT
            random-pos
            set shape "square"
            set color pink
            set utility random-normal 0 5
            set pRatingList []
            set isLiar False
            if (do_liars)
            [
              if ((random-float 1) < liar-probability) [set isLiar True]
            ]
          ]
        ]
      ]
    ]
  ]
end


; Public Domain:
; To the extent possible under law, Uri Wilensky has waived all
; copyright and related or neighboring rights to this model.
@#$#@#$#@
GRAPHICS-WINDOW
0
0
437
438
-1
-1
13.0
1
10
1
1
1
0
1
1
1
-16
16
-16
16
-16
16
1
1
1
ticks
30.0

SLIDER
9
106
164
139
number-of-consumers
number-of-consumers
100
500
500.0
400
1
NIL
HORIZONTAL

BUTTON
11
10
120
43
NIL
setup
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

SLIDER
11
143
164
176
number-of-providers
number-of-providers
20
100
100.0
80
1
NIL
HORIZONTAL

BUTTON
11
51
120
84
NIL
go
T
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

SLIDER
8
587
180
620
max-death-per-tick
max-death-per-tick
2
10
10.0
8
1
NIL
HORIZONTAL

SLIDER
8
622
180
655
max-spawn-per-tick
max-spawn-per-tick
2
10
10.0
8
1
NIL
HORIZONTAL

PLOT
427
65
627
215
Profile repartition of providers
NIL
NIL
-10.0
10.0
0.0
10.0
true
false
"" ""
PENS
"utility" 1.0 0 -16777216 true "" "histogram [profile] of providers "

SLIDER
8
658
180
691
delta_ang
delta_ang
0
20
9.0
1
1
NIL
HORIZONTAL

SLIDER
11
183
164
216
radius
radius
0
16
16.0
0.1
1
NIL
HORIZONTAL

SLIDER
8
552
200
585
consumer-death-n-spawn
consumer-death-n-spawn
0
100
4.0
1
1
NIL
HORIZONTAL

SLIDER
9
516
199
549
provider-death-n-spawn
provider-death-n-spawn
0
100
0.0
1
1
NIL
HORIZONTAL

MONITOR
560
10
686
55
Number of providers
count providers
17
1
11

MONITOR
425
10
558
55
Number of consumers
count consumers
17
1
11

PLOT
629
65
829
215
utility repartition
NIL
NIL
-10.0
10.0
0.0
10.0
false
false
"" ""
PENS
"default" 1.0 0 -16777216 true "" "histogram [utility] of providers"

PLOT
427
229
710
436
Global utility
NIL
NIL
0.0
10.0
0.0
10.0
true
false
"" ""
PENS
"default" 1.0 0 -16777216 true "" "plot item (ticks - 1) UG"

SWITCH
11
232
129
265
do_IT
do_IT
0
1
-1000

SWITCH
12
271
129
304
do_WR
do_WR
1
1
-1000

SWITCH
13
312
128
345
do_CR
do_CR
1
1
-1000

PLOT
716
229
916
379
Temperature
NIL
NIL
0.0
10.0
0.0
10.0
true
false
"" ""
PENS
"default" 1.0 0 -16777216 true "" "plot temperature"

SWITCH
8
480
146
513
DYNAMIC_ENV
DYNAMIC_ENV
1
1
-1000

SWITCH
141
232
268
265
save_utility
save_utility
1
1
-1000

SWITCH
281
269
403
302
WR_VERBOSE
WR_VERBOSE
1
1
-1000

PLOT
921
71
1298
379
Mean reliability factors over time
tick
NIL
0.0
10.0
0.0
2.0
true
true
"" ""
PENS
"IT" 1.0 0 -16777216 true "" "plot item (ticks - 1) roI"
"WR" 1.0 0 -7500403 true "" "plot item (ticks - 1) roW"
"CR" 1.0 0 -2674135 true "" "plot item (ticks - 1) roC"
"Overall" 1.0 0 -955883 true "" "plot item (ticks - 1) roO"

SWITCH
140
269
268
302
save_reliability
save_reliability
1
1
-1000

SWITCH
282
232
403
265
HAS_PROFILER
HAS_PROFILER
1
1
-1000

SLIDER
161
52
333
85
nb-simulation
nb-simulation
1
20
10.0
1
1
NIL
HORIZONTAL

PLOT
470
449
670
599
Utility histogram of consumers
NIL
NIL
-100.0
100.0
0.0
1.0
true
false
"" ""
PENS
"default" 1.0 0 -16777216 true "" "histogram [100 * (item 3 (last ratingList))] of consumers"

BUTTON
672
450
767
483
save histogram
export-histogram-ug
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

SWITCH
140
313
269
346
save_mean_deviation_ug
save_mean_deviation_ug
1
1
-1000

SWITCH
13
373
126
406
do_liars
do_liars
0
1
-1000

SLIDER
131
373
327
406
liar-probability
liar-probability
0
1
1.0
0.01
1
NIL
HORIZONTAL

SLIDER
131
417
303
450
maximum-lie
maximum-lie
0
20
5.0
0.1
1
UG
HORIZONTAL

@#$#@#$#@
## WHAT IS IT?

This code example demonstrates the correct way to uniformly distribute turtles on the surface of a sphere. Note that simply setting the heading and pitch to random numbers between 0 and 360 results in a non-uniform distribution with clustering at the poles in the z direction.  The solution in `setup-uniform` is based on information found here:

http://mathworld.wolfram.com/SpherePointPicking.html

<!-- 2007 -->
@#$#@#$#@
default
true
0
Polygon -7500403 true true 150 5 40 250 150 205 260 250

airplane
true
0
Polygon -7500403 true true 150 0 135 15 120 60 120 105 15 165 15 195 120 180 135 240 105 270 120 285 150 270 180 285 210 270 165 240 180 180 285 195 285 165 180 105 180 60 165 15

arrow
true
0
Polygon -7500403 true true 150 0 0 150 105 150 105 293 195 293 195 150 300 150

box
false
0
Polygon -7500403 true true 150 285 285 225 285 75 150 135
Polygon -7500403 true true 150 135 15 75 150 15 285 75
Polygon -7500403 true true 15 75 15 225 150 285 150 135
Line -16777216 false 150 285 150 135
Line -16777216 false 150 135 15 75
Line -16777216 false 150 135 285 75

bug
true
0
Circle -7500403 true true 96 182 108
Circle -7500403 true true 110 127 80
Circle -7500403 true true 110 75 80
Line -7500403 true 150 100 80 30
Line -7500403 true 150 100 220 30

butterfly
true
0
Polygon -7500403 true true 150 165 209 199 225 225 225 255 195 270 165 255 150 240
Polygon -7500403 true true 150 165 89 198 75 225 75 255 105 270 135 255 150 240
Polygon -7500403 true true 139 148 100 105 55 90 25 90 10 105 10 135 25 180 40 195 85 194 139 163
Polygon -7500403 true true 162 150 200 105 245 90 275 90 290 105 290 135 275 180 260 195 215 195 162 165
Polygon -16777216 true false 150 255 135 225 120 150 135 120 150 105 165 120 180 150 165 225
Circle -16777216 true false 135 90 30
Line -16777216 false 150 105 195 60
Line -16777216 false 150 105 105 60

car
false
0
Polygon -7500403 true true 300 180 279 164 261 144 240 135 226 132 213 106 203 84 185 63 159 50 135 50 75 60 0 150 0 165 0 225 300 225 300 180
Circle -16777216 true false 180 180 90
Circle -16777216 true false 30 180 90
Polygon -16777216 true false 162 80 132 78 134 135 209 135 194 105 189 96 180 89
Circle -7500403 true true 47 195 58
Circle -7500403 true true 195 195 58

circle
false
0
Circle -7500403 true true 0 0 300

circle 2
false
0
Circle -7500403 true true 0 0 300
Circle -16777216 true false 30 30 240

cow
false
0
Polygon -7500403 true true 200 193 197 249 179 249 177 196 166 187 140 189 93 191 78 179 72 211 49 209 48 181 37 149 25 120 25 89 45 72 103 84 179 75 198 76 252 64 272 81 293 103 285 121 255 121 242 118 224 167
Polygon -7500403 true true 73 210 86 251 62 249 48 208
Polygon -7500403 true true 25 114 16 195 9 204 23 213 25 200 39 123

cylinder
false
0
Circle -7500403 true true 0 0 300

dot
false
0
Circle -7500403 true true 90 90 120

face happy
false
0
Circle -7500403 true true 8 8 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Polygon -16777216 true false 150 255 90 239 62 213 47 191 67 179 90 203 109 218 150 225 192 218 210 203 227 181 251 194 236 217 212 240

face neutral
false
0
Circle -7500403 true true 8 7 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Rectangle -16777216 true false 60 195 240 225

face sad
false
0
Circle -7500403 true true 8 8 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Polygon -16777216 true false 150 168 90 184 62 210 47 232 67 244 90 220 109 205 150 198 192 205 210 220 227 242 251 229 236 206 212 183

fish
false
0
Polygon -1 true false 44 131 21 87 15 86 0 120 15 150 0 180 13 214 20 212 45 166
Polygon -1 true false 135 195 119 235 95 218 76 210 46 204 60 165
Polygon -1 true false 75 45 83 77 71 103 86 114 166 78 135 60
Polygon -7500403 true true 30 136 151 77 226 81 280 119 292 146 292 160 287 170 270 195 195 210 151 212 30 166
Circle -16777216 true false 215 106 30

flag
false
0
Rectangle -7500403 true true 60 15 75 300
Polygon -7500403 true true 90 150 270 90 90 30
Line -7500403 true 75 135 90 135
Line -7500403 true 75 45 90 45

flower
false
0
Polygon -10899396 true false 135 120 165 165 180 210 180 240 150 300 165 300 195 240 195 195 165 135
Circle -7500403 true true 85 132 38
Circle -7500403 true true 130 147 38
Circle -7500403 true true 192 85 38
Circle -7500403 true true 85 40 38
Circle -7500403 true true 177 40 38
Circle -7500403 true true 177 132 38
Circle -7500403 true true 70 85 38
Circle -7500403 true true 130 25 38
Circle -7500403 true true 96 51 108
Circle -16777216 true false 113 68 74
Polygon -10899396 true false 189 233 219 188 249 173 279 188 234 218
Polygon -10899396 true false 180 255 150 210 105 210 75 240 135 240

house
false
0
Rectangle -7500403 true true 45 120 255 285
Rectangle -16777216 true false 120 210 180 285
Polygon -7500403 true true 15 120 150 15 285 120
Line -16777216 false 30 120 270 120

leaf
false
0
Polygon -7500403 true true 150 210 135 195 120 210 60 210 30 195 60 180 60 165 15 135 30 120 15 105 40 104 45 90 60 90 90 105 105 120 120 120 105 60 120 60 135 30 150 15 165 30 180 60 195 60 180 120 195 120 210 105 240 90 255 90 263 104 285 105 270 120 285 135 240 165 240 180 270 195 240 210 180 210 165 195
Polygon -7500403 true true 135 195 135 240 120 255 105 255 105 285 135 285 165 240 165 195

line
true
0
Line -7500403 true 150 0 150 300

line half
true
0
Line -7500403 true 150 0 150 150

pentagon
false
0
Polygon -7500403 true true 150 15 15 120 60 285 240 285 285 120

person
false
0
Circle -7500403 true true 110 5 80
Polygon -7500403 true true 105 90 120 195 90 285 105 300 135 300 150 225 165 300 195 300 210 285 180 195 195 90
Rectangle -7500403 true true 127 79 172 94
Polygon -7500403 true true 195 90 240 150 225 180 165 105
Polygon -7500403 true true 105 90 60 150 75 180 135 105

plant
false
0
Rectangle -7500403 true true 135 90 165 300
Polygon -7500403 true true 135 255 90 210 45 195 75 255 135 285
Polygon -7500403 true true 165 255 210 210 255 195 225 255 165 285
Polygon -7500403 true true 135 180 90 135 45 120 75 180 135 210
Polygon -7500403 true true 165 180 165 210 225 180 255 120 210 135
Polygon -7500403 true true 135 105 90 60 45 45 75 105 135 135
Polygon -7500403 true true 165 105 165 135 225 105 255 45 210 60
Polygon -7500403 true true 135 90 120 45 150 15 180 45 165 90

square
false
0
Rectangle -7500403 true true 30 30 270 270

square 2
false
0
Rectangle -7500403 true true 30 30 270 270
Rectangle -16777216 true false 60 60 240 240

star
false
0
Polygon -7500403 true true 151 1 185 108 298 108 207 175 242 282 151 216 59 282 94 175 3 108 116 108

target
false
0
Circle -7500403 true true 0 0 300
Circle -16777216 true false 30 30 240
Circle -7500403 true true 60 60 180
Circle -16777216 true false 90 90 120
Circle -7500403 true true 120 120 60

tree
false
0
Circle -7500403 true true 118 3 94
Rectangle -6459832 true false 120 195 180 300
Circle -7500403 true true 65 21 108
Circle -7500403 true true 116 41 127
Circle -7500403 true true 45 90 120
Circle -7500403 true true 104 74 152

triangle
false
0
Polygon -7500403 true true 150 30 15 255 285 255

triangle 2
false
0
Polygon -7500403 true true 150 30 15 255 285 255
Polygon -16777216 true false 151 99 225 223 75 224

truck
false
0
Rectangle -7500403 true true 4 45 195 187
Polygon -7500403 true true 296 193 296 150 259 134 244 104 208 104 207 194
Rectangle -1 true false 195 60 195 105
Polygon -16777216 true false 238 112 252 141 219 141 218 112
Circle -16777216 true false 234 174 42
Rectangle -7500403 true true 181 185 214 194
Circle -16777216 true false 144 174 42
Circle -16777216 true false 24 174 42
Circle -7500403 false true 24 174 42
Circle -7500403 false true 144 174 42
Circle -7500403 false true 234 174 42

turtle
true
0
Polygon -10899396 true false 215 204 240 233 246 254 228 266 215 252 193 210
Polygon -10899396 true false 195 90 225 75 245 75 260 89 269 108 261 124 240 105 225 105 210 105
Polygon -10899396 true false 105 90 75 75 55 75 40 89 31 108 39 124 60 105 75 105 90 105
Polygon -10899396 true false 132 85 134 64 107 51 108 17 150 2 192 18 192 52 169 65 172 87
Polygon -10899396 true false 85 204 60 233 54 254 72 266 85 252 107 210
Polygon -7500403 true true 119 75 179 75 209 101 224 135 220 225 175 261 128 261 81 224 74 135 88 99

wheel
false
0
Circle -7500403 true true 3 3 294
Circle -16777216 true false 30 30 240
Line -7500403 true 150 285 150 15
Line -7500403 true 15 150 285 150
Circle -7500403 true true 120 120 60
Line -7500403 true 216 40 79 269
Line -7500403 true 40 84 269 221
Line -7500403 true 40 216 269 79
Line -7500403 true 84 40 221 269

x
false
0
Polygon -7500403 true true 270 75 225 30 30 225 75 270
Polygon -7500403 true true 30 75 75 30 270 225 225 270
@#$#@#$#@
NetLogo 3D 6.0.4
@#$#@#$#@
setup-uniform
@#$#@#$#@
@#$#@#$#@
@#$#@#$#@
@#$#@#$#@
default
0.0
-0.2 0 0.0 1.0
0.0 1 1.0 0.0
0.2 0 0.0 1.0
link direction
true
0
Line -7500403 true 150 150 90 180
Line -7500403 true 150 150 210 180
@#$#@#$#@
0
@#$#@#$#@
